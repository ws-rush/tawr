(function(r,s){typeof exports=="object"&&typeof module<"u"?s(exports,require("react/jsx-runtime"),require("valtio"),require("derive-valtio"),require("react")):typeof define=="function"&&define.amd?define(["exports","react/jsx-runtime","valtio","derive-valtio","react"],s):(r=typeof globalThis<"u"?globalThis:r||self,s(r.TawrState={},r.jsxRuntime,r.valtio,r.deriveValtio,r.react))})(this,function(r,s,m,u,v){"use strict";function w(c){const{state:n,getters:a,actions:p}=c,t=m.proxy(n()),S=new Set;if(a){const i=a(t);u.derive(i,{proxy:t}),t.$underive=o=>{o&&o.length>0?u.underive(t,{keys:o.map(String),delete:!0}):u.underive(t)},t.$invalidate=o=>{if(o&&o.length>0){u.underive(t,{keys:o.map(String),delete:!0});const l={};for(const h of o)l[h]=i[h];u.derive(l,{proxy:t})}else u.underive(t),u.derive(i,{proxy:t})}}if(t.$onAction=i=>(S.add(i),()=>{S.delete(i)}),p){const i={};for(const[o,l]of Object.entries(p)){const h=(...g)=>{let y=[],b=[];const T={name:o,store:t,args:g,after:e=>{y.push(e)},onError:e=>{b.push(e)}};S.forEach(e=>{e(T)});let d;try{return d=l.apply(t,g),d instanceof Promise?d.then(e=>(y.forEach(f=>f(e)),e)).catch(e=>{throw b.forEach(f=>f(e)),e}):(y.forEach(e=>e(d)),d)}catch(e){throw b.forEach(f=>f(e)),e}};i[o]=h}Object.defineProperty(t,"actions",{value:i,enumerable:!0,configurable:!0})}return t}const E=c=>m.useSnapshot(c);class j extends v.Component{constructor(n){super(n),this.state={error:null}}static getDerivedStateFromError(n){return{error:n}}componentDidCatch(n,a){console.error("Error caught by boundary:",n,a)}render(){return this.state.error?this.props.fallback(this.state.error):this.props.children}}function A({resolve:c,children:n}){const a=v.use(c);return s.jsx(s.Fragment,{children:n(a)})}function C({resolve:c,fallback:n=null,error:a=x=>s.jsxs("div",{children:["Error: ",x.message]}),children:p}){return s.jsx(j,{fallback:a,children:s.jsx(v.Suspense,{fallback:n,children:s.jsx(A,{resolve:c,children:p})})})}r.Awaitable=C,r.defineStore=w,r.useSnapshot=E,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});
